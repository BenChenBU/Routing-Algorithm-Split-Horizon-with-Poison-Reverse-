import java.io.*;

/*Author: Megan Horan (mrhoran@bu.edu)
 * Date: 11/21/16
 * 
 * 
 * This is the class that students need to implement. The code skeleton is provided.
 * Students need to implement rtinit(), rtupdate() and linkhandler().
 * printdt() is provided to pretty print a table of the current costs for reaching
 * other nodes in the network.
 */ 
public class Node { 
    
    public static final int INFINITY = 9999;
    
    int[] lkcost;  /*The link cost between node 0 and other nodes*/
    int[][] costs;    /*Define distance table*/
    
    int nodename;               /*Name of this node*/
    
    /* Class constructor */
    public Node() { }
    
    /* students to write the following two routines, and maybe some others */
    void rtinit(int nodename, int[] initial_lkcost) { 
    
        
        this.lkcost = new int[4];  /*The link cost between node 0 and other nodes*/
        this.costs = new int[4][4];
        this.nodename = nodename;
        
        this.lkcost = initial_lkcost.clone();
        
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
            
                if(i == j){

                    this.costs[i][j] = initial_lkcost[i];
                    
                    
                }
                else
                    this.costs[i][j] = INFINITY;
            }
        }
        
        // send new packets to all of the corresponding nodes that you can reach
        for(int i = 0; i < 4; i++){
            
            if(lkcost[i] != INFINITY && i != this.nodename){
            
                Packet new_pck = new Packet(this.nodename, i, lkcost);
            
                NetworkSimulator.tolayer2(new_pck);
            }
            else 
                continue;
        }
        
    }
  
    void rtupdate(Packet rcvdpkt) {

        
       // initializing local variables
        
        int minimum;
        int x; 
        int lowest_dist;
        boolean time2update = false; // boolean to see when to send next
        int next_hop = -1; // next hop or int to poision
     
        int source = rcvdpkt.sourceid; // source and destination node ids
        int dest = rcvdpkt.destid;
     
        int[] new_minCosts = new int[4]; // arrays for sending new min costs to nodes
        int[] lieArray= new int[4];
        
        // update the values int the costs 2D array based on the min cost array you got
        
        for(int i=0; i< 4; i++){
         
            x = rcvdpkt.mincost[i] + lkcost[source];  // add the new value from the minCost array to the path 
            
            if(x != INFINITY && x != costs[i][source]){
          
                costs[i][source] = x; 
                
                time2update= true;
       
            }
        }
     
     //if changed, send a packet to all neighbors
     if(time2update==true){
         
         // go through and find the next smallest hop in our cost array
           for (int n=0; n<4; n++){ 
                                  
               minimum = INFINITY;
               for (int m=0; m<4; m++){
                   
                   lowest_dist = costs[n][m];
                   
                   if(lowest_dist < minimum){
                       minimum = lowest_dist; 
                   }
                   new_minCosts[n] = minimum; // save it to a new min cost array

                   if(m == source){
                       next_hop = m; // this is the lowest node and it is form the source so we know we should poision it
                   }
                   else{
                       next_hop = -1;
                   }
               }
           }
         // copy the min costs array for our lie array
         
         for(int w = 0; w < 4; w++)
             
             lieArray[w] = new_minCosts[w];
   
      
         for(int j = 0 ; j < 4 ; j++){
             
             if(lkcost[j] == INFINITY || j == nodename){ //you cant reach the node and its not you, dont sent it 
              
                 continue;
             }
             else{
            
                 if(next_hop == j){ // if you found the next hop to lie to , send it the lie array packet, with
                     //next hop set to 999
          
                     lieArray[dest] = INFINITY;
                     Packet lie_p = new Packet(nodename, j, lieArray);
                     //NetworkSimulator.tolayer2(lie_p);
                 }
                 else{
                     
                     // otherwise just send it the new updates min cost pckt
                     Packet send_pck = new Packet(nodename, j, new_minCosts); 
                     NetworkSimulator.tolayer2(send_pck);
                 }
             }
         }
         System.out.println("Distance V table: ");
         this.printdt();
      }
     }

    /* called when cost from the node to linkid changes from current value to newcost*/
    void linkhandler(int linkid, int newcost) {  
    
        // go through and update the link 
         lkcost[linkid] = newcost;
     
     // reset the min cost table of the node
     
     for(int m = 0 ; m < 4; m++){
      
         if(this.lkcost[m] == INFINITY || m == this.nodename){ //if node is unreachable, don't send
             
             continue;
         }
      
         else{
             // send the new update min cost to all the neighbors
             
             Packet p = new Packet(this.nodename, m, lkcost); 
             NetworkSimulator.tolayer2(p);
         }
     }
     
        
    }    


    /* Prints the current costs to reaching other nodes in the network */
    void printdt() {
        
        switch(nodename) {
 
 case 0:
     System.out.printf("                via     \n");
     System.out.printf("   D0 |    1     2 \n");
     System.out.printf("  ----|-----------------\n");
     System.out.printf("     1|  %3d   %3d \n",costs[1][1], costs[1][2]);
     System.out.printf("dest 2|  %3d   %3d \n",costs[2][1], costs[2][2]);
     System.out.printf("     3|  %3d   %3d \n",costs[3][1], costs[3][2]);
     break;
 case 1:
     System.out.printf("                via     \n");
     System.out.printf("   D1 |    0     2    3 \n");
     System.out.printf("  ----|-----------------\n");
     System.out.printf("     0|  %3d   %3d   %3d\n",costs[0][0], costs[0][2],costs[0][3]);
     System.out.printf("dest 2|  %3d   %3d   %3d\n",costs[2][0], costs[2][2],costs[2][3]);
     System.out.printf("     3|  %3d   %3d   %3d\n",costs[3][0], costs[3][2],costs[3][3]);
     break;    
 case 2:
     System.out.printf("                via     \n");
     System.out.printf("   D2 |    0     1    3 \n");
     System.out.printf("  ----|-----------------\n");
     System.out.printf("     0|  %3d   %3d   %3d\n",costs[0][0], costs[0][1],costs[0][3]);
     System.out.printf("dest 1|  %3d   %3d   %3d\n",costs[1][0], costs[1][1],costs[1][3]);
     System.out.printf("     3|  %3d   %3d   %3d\n",costs[3][0], costs[3][1],costs[3][3]);
     break;
 case 3:
     System.out.printf("                via     \n");
     System.out.printf("   D3 |    1     2 \n");
     System.out.printf("  ----|-----------------\n");
     System.out.printf("     0|  %3d   %3d\n",costs[0][1],costs[0][2]);
     System.out.printf("dest 1|  %3d   %3d\n",costs[1][1],costs[1][2]);
     System.out.printf("     2|  %3d   %3d\n",costs[2][1],costs[2][2]);
     break;
        }
    }
    
}